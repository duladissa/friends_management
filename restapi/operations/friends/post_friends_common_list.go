// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostFriendsCommonListHandlerFunc turns a function with the right signature into a post friends common list handler
type PostFriendsCommonListHandlerFunc func(PostFriendsCommonListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFriendsCommonListHandlerFunc) Handle(params PostFriendsCommonListParams) middleware.Responder {
	return fn(params)
}

// PostFriendsCommonListHandler interface for that can handle valid post friends common list params
type PostFriendsCommonListHandler interface {
	Handle(PostFriendsCommonListParams) middleware.Responder
}

// NewPostFriendsCommonList creates a new http.Handler for the post friends common list operation
func NewPostFriendsCommonList(ctx *middleware.Context, handler PostFriendsCommonListHandler) *PostFriendsCommonList {
	return &PostFriendsCommonList{Context: ctx, Handler: handler}
}

/*PostFriendsCommonList swagger:route POST /friends/common/list friends postFriendsCommonList

3. Retrieve the common friends list for two given user.

3. As a user, I need an API to retrieve the common friends list between two email addresses.

*/
type PostFriendsCommonList struct {
	Context *middleware.Context
	Handler PostFriendsCommonListHandler
}

func (o *PostFriendsCommonList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostFriendsCommonListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
