// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostFriendsUpdatesBlockHandlerFunc turns a function with the right signature into a post friends updates block handler
type PostFriendsUpdatesBlockHandlerFunc func(PostFriendsUpdatesBlockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFriendsUpdatesBlockHandlerFunc) Handle(params PostFriendsUpdatesBlockParams) middleware.Responder {
	return fn(params)
}

// PostFriendsUpdatesBlockHandler interface for that can handle valid post friends updates block params
type PostFriendsUpdatesBlockHandler interface {
	Handle(PostFriendsUpdatesBlockParams) middleware.Responder
}

// NewPostFriendsUpdatesBlock creates a new http.Handler for the post friends updates block operation
func NewPostFriendsUpdatesBlock(ctx *middleware.Context, handler PostFriendsUpdatesBlockHandler) *PostFriendsUpdatesBlock {
	return &PostFriendsUpdatesBlock{Context: ctx, Handler: handler}
}

/*PostFriendsUpdatesBlock swagger:route POST /friends/updates/block friends postFriendsUpdatesBlock

Block a given users updates.

5. As a user, I need an API to block updates from an email address.</br> Suppose andy@example.com blocks john@example.com:</br> <ul> <li>if they are connected as friends, then andy will no longer receive notifications from john</li> <li>if they are not connected as friends, then no new friends connection can be added</li> </ul>

*/
type PostFriendsUpdatesBlock struct {
	Context *middleware.Context
	Handler PostFriendsUpdatesBlockHandler
}

func (o *PostFriendsUpdatesBlock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostFriendsUpdatesBlockParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
