// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostFriendsConnectionsHandlerFunc turns a function with the right signature into a post friends connections handler
type PostFriendsConnectionsHandlerFunc func(PostFriendsConnectionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFriendsConnectionsHandlerFunc) Handle(params PostFriendsConnectionsParams) middleware.Responder {
	return fn(params)
}

// PostFriendsConnectionsHandler interface for that can handle valid post friends connections params
type PostFriendsConnectionsHandler interface {
	Handle(PostFriendsConnectionsParams) middleware.Responder
}

// NewPostFriendsConnections creates a new http.Handler for the post friends connections operation
func NewPostFriendsConnections(ctx *middleware.Context, handler PostFriendsConnectionsHandler) *PostFriendsConnections {
	return &PostFriendsConnections{Context: ctx, Handler: handler}
}

/*PostFriendsConnections swagger:route POST /friends/connections friends postFriendsConnections

1. Create connections between two given users.

1. As a user, I need an API to create a friend connection between two email addresses.

*/
type PostFriendsConnections struct {
	Context *middleware.Context
	Handler PostFriendsConnectionsHandler
}

func (o *PostFriendsConnections) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostFriendsConnectionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
