// Code generated by go-swagger; DO NOT EDIT.

package friends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/duladissa/friends_management/models"
)

// NewPostFriendsConnectionsListParams creates a new PostFriendsConnectionsListParams object
// no default values defined in spec.
func NewPostFriendsConnectionsListParams() PostFriendsConnectionsListParams {

	return PostFriendsConnectionsListParams{}
}

// PostFriendsConnectionsListParams contains all the bound params for the post friends connections list operation
// typically these are obtained from a http.Request
//
// swagger:parameters postFriendsConnectionsList
type PostFriendsConnectionsListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The languages the client is able to understand, and which locale variant is preferred.
	  In: header
	*/
	AcceptLanguage *string
	/*Authorization
	  In: header
	*/
	Authorization *string
	/*Body
	  Required: true
	  In: body
	*/
	Body *models.Friend
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostFriendsConnectionsListParams() beforehand.
func (o *PostFriendsConnectionsListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindAcceptLanguage(r.Header[http.CanonicalHeaderKey("Accept-Language")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Friend
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body"))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body"))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAcceptLanguage binds and validates parameter AcceptLanguage from header.
func (o *PostFriendsConnectionsListParams) bindAcceptLanguage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AcceptLanguage = &raw

	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *PostFriendsConnectionsListParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Authorization = &raw

	return nil
}
