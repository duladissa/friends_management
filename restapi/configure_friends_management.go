// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/Stratoscale/swagger/query"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/duladissa/friends_management/restapi/operations"
	"github.com/duladissa/friends_management/restapi/operations/friends"

	models "github.com/duladissa/friends_management/models"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name FriendsAPI -inpkg

// FriendsAPI
type FriendsAPI interface {
	// PostFriendsCommonList is 3. As a user, I need an API to retrieve the common friends list between two email addresses.
	PostFriendsCommonList(ctx context.Context, params friends.PostFriendsCommonListParams) middleware.Responder
	// PostFriendsConnections is 1. As a user, I need an API to create a friend connection between two email addresses.
	PostFriendsConnections(ctx context.Context, params friends.PostFriendsConnectionsParams) middleware.Responder
	// PostFriendsConnectionsList is 2. As a user, I need an API to retrieve the friends list for an email address.
	PostFriendsConnectionsList(ctx context.Context, params friends.PostFriendsConnectionsListParams) middleware.Responder
	// PostFriendsUpdatesBlock is 5. As a user, I need an API to block updates from an email address.</br> Suppose andy@example.com blocks john@example.com:</br> <ul> <li>if they are connected as friends, then andy will no longer receive notifications from john</li> <li>if they are not connected as friends, then no new friends connection can be added</li> </ul>
	PostFriendsUpdatesBlock(ctx context.Context, params friends.PostFriendsUpdatesBlockParams) middleware.Responder
	// PostFriendsUpdatesList is 6. As a user, I need an API to retrieve all email addresses that can receive updates from an email address.</br> Eligibility for receiving updates from i.e. john@example.com</br> <ul> <li>has not blocked updates from john@example.com, and</li> <li>at least one of the following:</li> <ul> <li>has a friend connection with john@example.com</li> <li>has subscribed to updates from john@example.com</li> <li>has been @mentioned in the update</li> </ul> </ul>
	PostFriendsUpdatesList(ctx context.Context, params friends.PostFriendsUpdatesListParams) middleware.Responder
	// PostFriendsUpdatesSubscribe is 4. As a user, I need an API to subscribe to updates from an email address.</br> Please note that subscribing to updates is NOT equivalent to adding a friend connection
	PostFriendsUpdatesSubscribe(ctx context.Context, params friends.PostFriendsUpdatesSubscribeParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	FriendsAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewFriendsManagementAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.FriendsPostFriendsCommonListHandler = friends.PostFriendsCommonListHandlerFunc(func(params friends.PostFriendsCommonListParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsCommonList(ctx, params)
	})
	api.FriendsPostFriendsConnectionsHandler = friends.PostFriendsConnectionsHandlerFunc(func(params friends.PostFriendsConnectionsParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsConnections(ctx, params)
	})
	api.FriendsPostFriendsConnectionsListHandler = friends.PostFriendsConnectionsListHandlerFunc(func(params friends.PostFriendsConnectionsListParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsConnectionsList(ctx, params)
	})
	api.FriendsPostFriendsUpdatesBlockHandler = friends.PostFriendsUpdatesBlockHandlerFunc(func(params friends.PostFriendsUpdatesBlockParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsUpdatesBlock(ctx, params)
	})
	api.FriendsPostFriendsUpdatesListHandler = friends.PostFriendsUpdatesListHandlerFunc(func(params friends.PostFriendsUpdatesListParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsUpdatesList(ctx, params)
	})
	api.FriendsPostFriendsUpdatesSubscribeHandler = friends.PostFriendsUpdatesSubscribeHandlerFunc(func(params friends.PostFriendsUpdatesSubscribeParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.FriendsAPI.PostFriendsUpdatesSubscribe(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), nil
}

// Query parse functions for all the models
// Those can be used to extract database query from the http path's query string
var (
	ErrorResponseQueryParse                 = query.MustNewBuilder(&query.Config{Model: models.ErrorResponse{}}).ParseRequest
	FriendQueryParse                        = query.MustNewBuilder(&query.Config{Model: models.Friend{}}).ParseRequest
	FriendsQueryParse                       = query.MustNewBuilder(&query.Config{Model: models.Friends{}}).ParseRequest
	FriendsListResponseQueryParse           = query.MustNewBuilder(&query.Config{Model: models.FriendsListResponse{}}).ParseRequest
	ReceiveUpdatesFriendsQueryParse         = query.MustNewBuilder(&query.Config{Model: models.ReceiveUpdatesFriends{}}).ParseRequest
	ReceiveUpdatesFriendsResponseQueryParse = query.MustNewBuilder(&query.Config{Model: models.ReceiveUpdatesFriendsResponse{}}).ParseRequest
	SubscribeFriendsQueryParse              = query.MustNewBuilder(&query.Config{Model: models.SubscribeFriends{}}).ParseRequest
	SuccessResponseQueryParse               = query.MustNewBuilder(&query.Config{Model: models.SuccessResponse{}}).ParseRequest
)

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
