// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API definitions",
    "title": "Friends Management",
    "license": {
      "name": "Copyright 2019 SPGroup. All rights reserved."
    },
    "version": "0.0.1",
    "x-ow-package": "default"
  },
  "basePath": "/api/v1",
  "paths": {
    "/friends/common/list": {
      "post": {
        "description": "3. As a user, I need an API to retrieve the common friends list between two email addresses.",
        "tags": [
          "friends"
        ],
        "summary": "3. Retrieve the common friends list for two given user.",
        "operationId": "postFriendsCommonList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FriendsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/connections": {
      "post": {
        "description": "1. As a user, I need an API to create a friend connection between two email addresses.",
        "tags": [
          "friends"
        ],
        "summary": "1. Create connections between two given users.",
        "operationId": "postFriendsConnections",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/connections/list": {
      "post": {
        "description": "2. As a user, I need an API to retrieve the friends list for an email address.",
        "tags": [
          "friends"
        ],
        "summary": "2. Retrieve the friends list for a given user.",
        "operationId": "postFriendsConnectionsList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friend"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FriendsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/block": {
      "post": {
        "description": "5. As a user, I need an API to block updates from an email address.\u003c/br\u003e Suppose andy@example.com blocks john@example.com:\u003c/br\u003e \u003cul\u003e \u003cli\u003eif they are connected as friends, then andy will no longer receive notifications from john\u003c/li\u003e \u003cli\u003eif they are not connected as friends, then no new friends connection can be added\u003c/li\u003e \u003c/ul\u003e ",
        "tags": [
          "friends"
        ],
        "summary": "5. Block a given users updates.",
        "operationId": "postFriendsUpdatesBlock",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/list": {
      "post": {
        "description": "6. As a user, I need an API to retrieve all email addresses that can receive updates from an email address.\u003c/br\u003e Eligibility for receiving updates from i.e. john@example.com\u003c/br\u003e \u003cul\u003e \u003cli\u003ehas not blocked updates from john@example.com, and\u003c/li\u003e \u003cli\u003eat least one of the following:\u003c/li\u003e \u003cul\u003e \u003cli\u003ehas a friend connection with john@example.com\u003c/li\u003e \u003cli\u003ehas subscribed to updates from john@example.com\u003c/li\u003e \u003cli\u003ehas been @mentioned in the update\u003c/li\u003e \u003c/ul\u003e \u003c/ul\u003e",
        "tags": [
          "friends"
        ],
        "summary": "6. Retrieve all users who can receive updates from given user.",
        "operationId": "postFriendsUpdatesList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceiveUpdatesFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReceiveUpdatesFriendsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/subscribe": {
      "post": {
        "description": "4. As a user, I need an API to subscribe to updates from an email address.\u003c/br\u003e Please note that subscribing to updates is NOT equivalent to adding a friend connection",
        "tags": [
          "friends"
        ],
        "summary": "4. Subscribe to a given users updates.",
        "operationId": "postFriendsUpdatesSubscribe",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string",
          "x-omitempty": true
        },
        "success": {
          "description": "success.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "The error type.",
          "type": "string",
          "x-omitempty": true
        }
      }
    },
    "Friend": {
      "description": "The friend email address.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "andy@example.com"
        }
      }
    },
    "Friends": {
      "type": "object",
      "properties": {
        "friends": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "andy@example.com",
            "john@example.com"
          ]
        }
      }
    },
    "FriendsListResponse": {
      "description": "List of friends along with the success.",
      "type": "object",
      "required": [
        "success",
        "friends"
      ],
      "properties": {
        "count": {
          "description": "success.",
          "type": "number",
          "format": "int",
          "example": 1
        },
        "friends": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "andy@example.com",
            "john@example.com"
          ]
        },
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    },
    "ReceiveUpdatesFriends": {
      "type": "object",
      "properties": {
        "sender": {
          "description": "Sender.",
          "type": "string",
          "example": "john@example.com"
        },
        "text": {
          "description": "Text",
          "type": "string",
          "example": "Hello World! kate@example.com"
        }
      }
    },
    "ReceiveUpdatesFriendsResponse": {
      "description": "List of friends along with the success.",
      "type": "object",
      "required": [
        "success",
        "recipients"
      ],
      "properties": {
        "recipients": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "lisa@example.com",
            "kate@example.com"
          ]
        },
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    },
    "SubscribeFriends": {
      "type": "object",
      "properties": {
        "requestor": {
          "description": "Requestor for the subscription.",
          "type": "string",
          "example": "andy@example.com"
        },
        "target": {
          "description": "Target of the subscription.",
          "type": "string",
          "example": "john@example.com"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "name": "friends"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API definitions",
    "title": "Friends Management",
    "license": {
      "name": "Copyright 2019 SPGroup. All rights reserved."
    },
    "version": "0.0.1",
    "x-ow-package": "default"
  },
  "basePath": "/api/v1",
  "paths": {
    "/friends/common/list": {
      "post": {
        "description": "3. As a user, I need an API to retrieve the common friends list between two email addresses.",
        "tags": [
          "friends"
        ],
        "summary": "3. Retrieve the common friends list for two given user.",
        "operationId": "postFriendsCommonList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FriendsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/connections": {
      "post": {
        "description": "1. As a user, I need an API to create a friend connection between two email addresses.",
        "tags": [
          "friends"
        ],
        "summary": "1. Create connections between two given users.",
        "operationId": "postFriendsConnections",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/connections/list": {
      "post": {
        "description": "2. As a user, I need an API to retrieve the friends list for an email address.",
        "tags": [
          "friends"
        ],
        "summary": "2. Retrieve the friends list for a given user.",
        "operationId": "postFriendsConnectionsList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Friend"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FriendsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/block": {
      "post": {
        "description": "5. As a user, I need an API to block updates from an email address.\u003c/br\u003e Suppose andy@example.com blocks john@example.com:\u003c/br\u003e \u003cul\u003e \u003cli\u003eif they are connected as friends, then andy will no longer receive notifications from john\u003c/li\u003e \u003cli\u003eif they are not connected as friends, then no new friends connection can be added\u003c/li\u003e \u003c/ul\u003e ",
        "tags": [
          "friends"
        ],
        "summary": "5. Block a given users updates.",
        "operationId": "postFriendsUpdatesBlock",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/list": {
      "post": {
        "description": "6. As a user, I need an API to retrieve all email addresses that can receive updates from an email address.\u003c/br\u003e Eligibility for receiving updates from i.e. john@example.com\u003c/br\u003e \u003cul\u003e \u003cli\u003ehas not blocked updates from john@example.com, and\u003c/li\u003e \u003cli\u003eat least one of the following:\u003c/li\u003e \u003cul\u003e \u003cli\u003ehas a friend connection with john@example.com\u003c/li\u003e \u003cli\u003ehas subscribed to updates from john@example.com\u003c/li\u003e \u003cli\u003ehas been @mentioned in the update\u003c/li\u003e \u003c/ul\u003e \u003c/ul\u003e",
        "tags": [
          "friends"
        ],
        "summary": "6. Retrieve all users who can receive updates from given user.",
        "operationId": "postFriendsUpdatesList",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceiveUpdatesFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReceiveUpdatesFriendsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/friends/updates/subscribe": {
      "post": {
        "description": "4. As a user, I need an API to subscribe to updates from an email address.\u003c/br\u003e Please note that subscribing to updates is NOT equivalent to adding a friend connection",
        "tags": [
          "friends"
        ],
        "summary": "4. Subscribe to a given users updates.",
        "operationId": "postFriendsUpdatesSubscribe",
        "parameters": [
          {
            "description": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscribeFriends"
            }
          },
          {
            "type": "string",
            "description": "Authorization",
            "name": "Authorization",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The languages the client is able to understand, and which locale variant is preferred.",
            "name": "Accept-Language",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string",
          "x-omitempty": true
        },
        "success": {
          "description": "success.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "The error type.",
          "type": "string",
          "x-omitempty": true
        }
      }
    },
    "Friend": {
      "description": "The friend email address.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "andy@example.com"
        }
      }
    },
    "Friends": {
      "type": "object",
      "properties": {
        "friends": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "andy@example.com",
            "john@example.com"
          ]
        }
      }
    },
    "FriendsListResponse": {
      "description": "List of friends along with the success.",
      "type": "object",
      "required": [
        "success",
        "friends"
      ],
      "properties": {
        "count": {
          "description": "success.",
          "type": "number",
          "format": "int",
          "example": 1
        },
        "friends": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "andy@example.com",
            "john@example.com"
          ]
        },
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    },
    "ReceiveUpdatesFriends": {
      "type": "object",
      "properties": {
        "sender": {
          "description": "Sender.",
          "type": "string",
          "example": "john@example.com"
        },
        "text": {
          "description": "Text",
          "type": "string",
          "example": "Hello World! kate@example.com"
        }
      }
    },
    "ReceiveUpdatesFriendsResponse": {
      "description": "List of friends along with the success.",
      "type": "object",
      "required": [
        "success",
        "recipients"
      ],
      "properties": {
        "recipients": {
          "description": "List of friends.",
          "type": "array",
          "items": {
            "description": "Friend email address",
            "type": "string"
          },
          "example": [
            "lisa@example.com",
            "kate@example.com"
          ]
        },
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    },
    "SubscribeFriends": {
      "type": "object",
      "properties": {
        "requestor": {
          "description": "Requestor for the subscription.",
          "type": "string",
          "example": "andy@example.com"
        },
        "target": {
          "description": "Target of the subscription.",
          "type": "string",
          "example": "john@example.com"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "description": "success.",
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "name": "friends"
    }
  ]
}`))
}
